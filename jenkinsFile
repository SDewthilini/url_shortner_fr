pipeline {
    agent any

    environment {
        DOCKER_HUB_USER = 'isuru243'
        IMAGE_NAME = 'isuru243/frontend'
        CONTAINER_NAME = 'react_frontend'
        SERVER_USER = 'ubuntu'
        
        AWS_ACCESS_KEY = credentials('aws_access_key')
        AWS_SECRET_KEY = credentials('aws_secret_key') // Fixed typo 'seacret' -> 'secret'
    }

    triggers {
        githubPush()
    }

    stages {
        // 1. Checkout code FIRST (contains Terraform files)
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/SDewthilini/url_shortner_fr.git'
            }
        }

        // 2. Prepare SSH key for EC2 access
        stage('Copy Secret File') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'main_pem', variable: 'PEM_FILE')]) {
                        sh 'cp $PEM_FILE $WORKSPACE/jenkinsKey.pem'
                        sh 'chmod 600 $WORKSPACE/jenkinsKey.pem'
                    }
                }
            }
        }

        // 3. Initialize Terraform
        stage('Terraform Init') {
            steps {
                script {
                    sh '''
                    export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
                    export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY
                    terraform init
                    '''
                }
            }
        }

        // 4. Apply Terraform configuration
        stage('Terraform Apply') {
            steps {
                script {
                    sh '''
                    export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
                    export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY
                    terraform apply -auto-approve
                    '''
                }
            }
        }

        // 5. Get EC2 IP address
        stage('Fetch EC2 IP') {
            steps {
                script {
                    def ec2Ip = sh(
                        script: 'terraform output -raw ec2_public_ip',
                        returnStdout: true
                    ).trim()
                    
                    writeFile file: 'inventory.ini', text: """
                    [jenkins]
                    ${ec2Ip} ansible_user=ubuntu ansible_ssh_private_key_file=$WORKSPACE/jenkinsKey.pem ansible_python_interpreter=/usr/bin/python3
                    """
                    
                    writeFile file: 'server_host.txt', text: ec2Ip
                }
            }
        }

        // 6. Build React application
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build React App') {
            steps {
                sh 'npm run build'
            }
        }

        // 7. Docker operations
        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = "${IMAGE_NAME}:${BUILD_NUMBER}"
                    def latestTag = "${IMAGE_NAME}:latest"
                    sh "docker build -t ${imageTag} -t ${latestTag} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'docker-hub-password', variable: 'DOCKER_HUB_PASS')]) {
                        sh "echo ${DOCKER_HUB_PASS} | docker login -u ${DOCKER_HUB_USER} --password-stdin"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def imageTag = "${IMAGE_NAME}:${BUILD_NUMBER}"
                    def latestTag = "${IMAGE_NAME}:latest"
                    sh "docker push ${imageTag}"
                    sh "docker push ${latestTag}"
                }
            }
        }

        // 8. Deploy to EC2
        stage('Deploy with Docker Compose on EC2') {
            steps {
                script {
                    def ec2Ip = readFile('server_host.txt').trim()
                    
                    sh """
                    scp -o StrictHostKeyChecking=no -i $WORKSPACE/jenkinsKey.pem docker-compose.yml $SERVER_USER@${ec2Ip}:/home/$SERVER_USER/
                    """
                    
                    sh """
                    ssh -i $WORKSPACE/jenkinsKey.pem $SERVER_USER@${ec2Ip} << 'EOF'
                    sudo apt update -y
                    sudo apt install -y docker-compose
                    sudo docker system prune -af
                    cd /home/$SERVER_USER
                    sudo docker-compose up -d
                    EOF
                    """
                }
            }
        }
    }
}